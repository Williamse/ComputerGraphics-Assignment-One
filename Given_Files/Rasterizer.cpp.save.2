//
//  Rasterizer.cpp
//  
//
//  Created by Joe Geigel on 11/30/11.
//  Copyright 2011 Rochester Institute of Technology. All rights reserved.
//

#include "Rasterizer.h"
#include "simpleCanvas.h"
#include <iostream>
#include <cmath>

/**
 *
 * Simple class that performs rasterization algorithms
 *
 */

/**
 * Constructor
 *
 * @param n number of scanlines
 *
 */
Rasterizer::Rasterizer (int n) : n_scanlines (n)
{
}

/**
*Swaps what a and b are pointing to
*@param p0 - pointer to first point to swap
* @param p1 - pointer to second point to swap
*/
void Rasterizer::swapPoints(int* p0, int* p1)
{
    int tempLoc = *p0;
    *p0 = *p1;
    *p1 = tempLoc;
}

/**
 * Draw a line from (x0,y0) to (x1, y1) on the simpleCanvas C.
 *
 * Implementation should be using the Midpoint Method
 *
 * You are to add the implementation here using only calls
 * to C.setPixel()
 *
 * @param x0 x coord of first endpoint
 * @param y0 y coord of first endpoint
 * @param x1 x coord of second endpoint
 * @param y1 y coord of second endpoint
 * @param C  The canvas on which to apply the draw command.
 */
void Rasterizer::drawLine (int x0, int y0, int x1, int y1, simpleCanvas &C)
{

	//Make sure our first x is on the left always
	if (x0 > x1)
	{
		swapPoints(&x0, &x1);
		swapPoints(&y0, &y1);
	}

	int x = x0;
	int y = y0;
	int major, minor, d;
	int dy = (y1 - y0), dx = (x1 - x0);

	bool smallPositive = dy >= 0 && dy <= dx;
	bool largePositive = dy >= 0 && dy > dx;
	bool smallNegative = dy < 0 && std::abs(dy) < dx;
	bool largeNegative = dy < 0 && std::abs(dy) >= dx;
	bool vertical = x0 == x1;


   /* 
    * Change Decision variable, major, minor, dx, and dy.
	* depending on what type of line we are dealing with.
	*/
	if (smallPositive)
	{
		d = 2 * dy - dx;
		major = 2 * dy;
		minor = 2 * (dy - dx);
	}
	else if (largePositive) 
	{
		d = 2 * dx - dy;
		major = 2 * dx;
		minor = 2 * (dx - dy);
	}
	else if (smallNegative)
	{
		dy = std::abs(dy);
		dx = std::abs(dx);
		d = 2 * dy - dx;
		major = 2 * dy;
		minor = 2 * (dy - dx);
	}
	else if (largeNegative)
	{
		dx = std::abs(dx);
		dy = std::abs(dy);
		d = 2 * dx - dy;
		major = 2 * dx;
		minor = 2 * (dx - dy);
	}
                                
	//Vertical lines are dealt with differently
    if (vertical)
	{
		if (y0 > y1)
		{
			swapPoints(&x0, &x1);
			swapPoints(&y0, &y1);
		}
		y = y0;
		while (y < y1)
		{
			C.setPixel(x0, y);
			y++;
		}
	}
	//Main processing loop for a line
	else
	{
		C.setPixel(x, y);
		while (x < x1)
		{
			if (d <= 0) {
				d = d + major;
			}
			else
			{
				d = d + minor;
				
				//X or Y will increase or decrease depending on the type of line
				if (largeNegative || largePositive){ x++; }
				else if (smallPositive)            { y++; }
				else if (smallNegative)            { y--; }
			}

			//X or Y will increase or decrease depending on the type of line
			if (smallPositive || smallNegative)   { x++; }
			else if (largePositive)               { y++; }
			else if (largeNegative)               { y--; }
			C.setPixel(x, y);
		}
	}
}
